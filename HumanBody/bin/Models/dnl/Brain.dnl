A Hunger has a value!
the range of Hunger's value is Integer!
A Satiation has a value!
the range of Satiation's value is Integer!
A LowNutrients has a value!
the range of LowNutrients's value is Integer!

use measureHunger with type Hunger!
use measureSatiation with type Satiation!
use measureLowNutrients with type LowNutrients!

accepts input on Satiation with type Satiation!
generates output on Hunger with type Hunger!

Initialize variables
<%
	measureLowNutrients = new LowNutrients (new Integer(0));
	measureSatiation = new Satiation (new Integer(0));
%>!

/*to start hold in initialEvent for time 1!
after initialEvent output Hunger!
from initialEvent go to NextEvent!
*/

to start  passivate in NextEvent!
when in NextEvent and receive Satiation go to verifySatiation!
when in NextEvent and receive LowNutrients go to verifyLowNutrients!

hold in verifyLowNutrients for time 0!
after verifyLowNutrients output Hunger!
from verifyLowNutrients go to NextEvent!

hold in verifySatiation for time 0!
after verifySatiation output Hunger!
from verifySatiation go to NextEvent!

external event for verifySatiation with Satiation
<%
	measureSatiation = (Satiation) messageList.get(0).getData();
%>!

external event for verifyLowNutrients with LowNutrients
<%
	measureSatiation = (LowNutrients) messageList.get(0).getData();
%>!

/*output event for initialEvent
<%
	measureHunger = new Hunger(new Integer(10));
	output.add(outHunger, measureHunger);
%>!*/


output event for verifySatiation
<%
	System.out.println("verifySatiation - Value(measureSatiation): " + measureSatiation.getValue());
	measureHunger = new Hunger(10 - measureSatiation.getValue());
	System.out.println("verifySatiation - Value(measureHunger): " + measureHunger.getValue());
	output.add(outHunger, measureHunger);
%>!

//On the transition going out from the state, perform the actions
output event for verifyLowNutrients
<%
	measureHunger = new Hunger(10 - measureLowNutrients.getValue());
	output.add(outHunger, measureHunger);
%>!
